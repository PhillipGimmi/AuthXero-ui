'use client';

import { useEffect, useRef, useState } from 'react';
import * as THREE from 'three';

const StarNestShader = () => {
  // Existing refs
  const canvasRef = useRef<HTMLCanvasElement | null>(null);
  const mouseRef = useRef({ x: 0, y: 0 });
  const zoomRef = useRef(0.8);
  const positionRef = useRef(new THREE.Vector3(0, 0, 0));
  const keysRef = useRef(new Set<string>());
  const speedRef = useRef(0);
  const regionRef = useRef(0);
  const rotationRef = useRef({ x: 0, y: 0 });
  const normalSpeedRef = useRef(0);

  // Add audio refs
  const audioContextRef = useRef<AudioContext | null>(null);
  const analyserRef = useRef<AnalyserNode | null>(null);
  const audioElementRef = useRef<HTMLAudioElement | null>(null);
  const audioSourceRef = useRef<MediaElementAudioSourceNode | null>(null);

  // Existing state
  const [textVisible, setTextVisible] = useState(true);
  const [regionText, setRegionText] = useState('Welcome to Cosmic Dreams');
  const [currentRegion, setCurrentRegion] = useState(0);
  
  // First useEffect for region text (keep as is)
  useEffect(() => {
    setTextVisible(true);
    
    if (currentRegion === 0) {
      setRegionText('Original Space - Cosmic Void');
    } else if (currentRegion === 1) {
      setRegionText('Alternative Space - Nebula Fields');
    } else if (currentRegion === 2) {
      setRegionText('Storm Region - Thunder Plains');
    } else if (currentRegion === 3) {
      setRegionText('Audio Reactive Zone');
    }
  
    const timer = setTimeout(() => {
      setTextVisible(false);
    }, 4000);
  
    return () => clearTimeout(timer);
  }, [currentRegion]);

  // Main useEffect for Three.js and audio setup
  useEffect(() => {
    if (!canvasRef.current) return;

    // Initialize Audio Context and setup
    const initAudio = async () => {
      try {
        audioContextRef.current = new AudioContext();
        analyserRef.current = audioContextRef.current.createAnalyser();
        analyserRef.current.fftSize = 256;
    
        // Create audio element
        const audio = new Audio('/wp-content/uploads/2024/audio/background.mp3');
        audio.loop = true;
        audioElementRef.current = audio;
    
        // Connect audio nodes
        const source = audioContextRef.current.createMediaElementSource(audio);
        audioSourceRef.current = source;
        source.connect(analyserRef.current);
        analyserRef.current.connect(audioContextRef.current.destination);
    
        // Start collecting frequency data
        const frequencyData = new Uint8Array(analyserRef.current.frequencyBinCount);
        const updateFrequencyData = () => {
          analyserRef.current?.getByteFrequencyData(frequencyData);
          requestAnimationFrame(updateFrequencyData);
        };
        updateFrequencyData();
      } catch (error) {
        console.error('Audio initialization error:', error);

      }
    };
    

    initAudio();

    // Rest of your existing Three.js setup...
    const renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current });
    renderer.setSize(window.innerWidth, window.innerHeight);

    const scene = new THREE.Scene();
    const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
    const geometry = new THREE.PlaneGeometry(2, 2);

    const material = new THREE.ShaderMaterial({
      uniforms: {
        iTime: { value: 0 },
        iResolution: { value: new THREE.Vector3(window.innerWidth, window.innerHeight, 1) },
        iMouse: { value: new THREE.Vector4() },
        iZoom: { value: 0.8 },
        iPosition: { value: new THREE.Vector3() },
        iSpeed: { value: 0 },
        iRegion: { value: 0 },
        iAudioFreqs: { value: new THREE.Vector4(0, 0, 0, 0) }
      },
      vertexShader: `
        void main() {
          gl_Position = vec4(position, 1.0);
        }
      `,
      fragmentShader: `
        uniform float iTime;
        uniform vec3 iResolution;
        uniform vec4 iMouse;
        uniform float iZoom;
        uniform vec3 iPosition;
        uniform float iSpeed;
        uniform float iRegion;
        uniform vec4 iAudioFreqs;

        #define iterations 17
        #define formuparam 0.53
        #define volsteps 20
        #define stepsize 0.1
        #define tile 0.850
        #define speed 0.003
        #define brightness 0.001
        #define darkmatter 0.200
        #define distfading 0.730
        #define saturation 0.850

// Utility functions
float hash(vec3 p) {
    p = fract(p * vec3(0.1031, 0.1030, 0.0973));
    p += dot(p, p.yxz + 33.33);
    return fract((p.x + p.y) * p.z);
}

float stormCloud(vec2 uv, float time) {
    vec3 p = vec3(uv * 10.0, time);
    float noise1 = hash(p);
    float noise2 = hash(p * 2.0);
    float noise3 = hash(p * 4.0);
    
    float finalNoise = noise1 * 0.5 + noise2 * 0.3 + noise3 * 0.2;
    float temporalNoise = sin(time * 2.0 + finalNoise * 6.28) * 0.5 + 0.5;
    
    return finalNoise * temporalNoise;
}

float field(in vec3 p, float s) {
    float strength = 7. + .03 * log(1.e-6 + fract(sin(iTime) * 4373.11));
    float accum = s/4.;
    float prev = 0.;
    float tw = 0.;
    for (int i = 0; i < 26; ++i) {
        float mag = dot(p, p);
        p = abs(p) / mag + vec3(-.5, -.4, -1.5);
        float w = exp(-float(i) / 7.);
        accum += w * exp(-strength * pow(abs(mag - prev), 2.2));
        tw += w;
        prev = mag;
    }
    return max(0., 5. * accum / tw - .7);
}

float field2(in vec3 p, float s) {
    float strength = 7. + .03 * log(1.e-6 + fract(sin(iTime) * 4373.11));
    float accum = s/4.;
    float prev = 0.;
    float tw = 0.;
    for (int i = 0; i < 18; ++i) {
        float mag = dot(p, p);
        p = abs(p) / mag + vec3(-.5, -.4, -1.5);
        float w = exp(-float(i) / 7.);
        accum += w * exp(-strength * pow(abs(mag - prev), 2.2));
        tw += w;
        prev = mag;
    }
    return max(0., 5. * accum / tw - .7);
}

vec3 nrand3(vec2 co) {
    vec3 a = fract(cos(co.x*8.3e-3 + co.y)*vec3(1.3e5, 4.7e5, 2.9e5));
    vec3 b = fract(sin(co.x*0.3e-3 + co.y)*vec3(8.1e5, 1.0e5, 0.1e5));
    return mix(a, b, 0.5);
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    // Determine region and handle hyperspeed first
    if (iSpeed > 0.5) {
        // REGION: HYPERSPEED
        vec2 uv = fragCoord.xy/iResolution.xy-.5;
        uv.y *= iResolution.y/iResolution.x;
        
        float distort = iSpeed * 0.2;
        uv *= 1.0 + distort * (hash(vec3(uv, iTime)) - 0.5);
        
        vec3 dir = vec3(uv*iZoom, 1.);
        float time = iTime*speed*(1.0 + iSpeed);
        
        float a1 = .5-iMouse.x/iResolution.x*0.5;
        float a2 = .8-iMouse.y/iResolution.y*0.5;
        mat2 rot1 = mat2(cos(a1),sin(a1),-sin(a1),cos(a1));
        mat2 rot2 = mat2(cos(a2),sin(a2),-sin(a2),cos(a2));
        dir.xz *= rot1;
        dir.xy *= rot2;
        
        vec3 from = vec3(0.5, 0.5, 0.5);
        from += vec3(time*0.5, time*0.25, -2.) + iPosition;
        from.xz *= rot1;
        from.xy *= rot2;
        
        vec3 speedDir = normalize(vec3(uv, 1.0));
        from += speedDir * iSpeed * 0.5;
        
        float s = 0.1, fade = 1.;
        vec3 v = vec3(0.);
        
        for (int r=0; r<volsteps; r++) {
            vec3 p = from + s*dir*.5;
            p = abs(vec3(tile)-mod(p,vec3(tile*2.)));
            float pa, a=pa=0.;
            
            for (int i=0; i<iterations; i++) {
                p = abs(p)/dot(p,p)-formuparam;
                a += abs(length(p)-pa);
                pa = length(p);
            }
            
            float dm = max(0.,darkmatter-a*a*.001);
            dm *= 1.0 + iSpeed;
            
            a *= a*a;
            if (r>6) fade *= 1.-dm;
            
            vec3 col = vec3(0.3, 0.4, 0.9);
            float streaks = pow(abs(uv.x), 5.0) * iSpeed;
            col += vec3(1.0, 0.8, 0.4) * streaks;
            
            float starBrightness = hash(floor(p*10.0))*0.8;
            starBrightness *= 1.0 + iSpeed * 0.5;
            
            v += fade * (col + starBrightness);
            v += vec3(s, s*s, s*s*s*s)*a*brightness*fade;
            
            fade *= distfading;
            s += stepsize * (1.0 + iSpeed * 0.5);
        }
        
        v = mix(vec3(length(v)), v, saturation);
        v *= 1.0 + iSpeed * 0.3;
        
        vec3 blurred = v;
        float blur = iSpeed - 0.5;
        float offset = hash(vec3(uv, iTime)) * blur;
        blurred *= 1.0 + offset * 0.2;
        v = mix(v, blurred, blur);
        
        fragColor = vec4(v*.01, 1.);
    } 
    else if (mod(iRegion, 4.0) == 0.0) {
        // REGION 0: ORIGINAL SPACE
        vec2 uv = fragCoord.xy/iResolution.xy-.5;
        uv.y *= iResolution.y/iResolution.x;
        
        vec3 dir = vec3(uv*iZoom, 1.);
        float time = iTime*speed;
        
        float a1 = .5-iMouse.x/iResolution.x*0.5;
        float a2 = .8-iMouse.y/iResolution.y*0.5;
        mat2 rot1 = mat2(cos(a1),sin(a1),-sin(a1),cos(a1));
        mat2 rot2 = mat2(cos(a2),sin(a2),-sin(a2),cos(a2));
        dir.xz *= rot1;
        dir.xy *= rot2;
        
        vec3 from = vec3(0.5, 0.5, 0.5);
        from += vec3(time*0.5, time*0.25, -2.) + iPosition;
        from.xz *= rot1;
        from.xy *= rot2;
        
        float s = 0.1, fade = 1.;
        vec3 v = vec3(0.);
        
        for (int r=0; r<volsteps; r++) {
            vec3 p = from + s*dir*.5;
            p = abs(vec3(tile)-mod(p,vec3(tile*2.)));
            float pa, a=pa=0.;
            
            for (int i=0; i<iterations; i++) {
                p = abs(p)/dot(p,p)-formuparam;
                a += abs(length(p)-pa);
                pa = length(p);
            }
            
            float dm = max(0.,darkmatter-a*a*.001);
            
            a *= a*a;
            if (r>6) fade *= 1.-dm;
            
            vec3 col = vec3(0.3, 0.4, 0.9);
            float starBrightness = hash(floor(p*10.0))*0.8;
            
            v += fade * (col + starBrightness);
            v += vec3(s, s*s, s*s*s*s)*a*brightness*fade;
            
            fade *= distfading;
            s += stepsize;
        }
        
        v = mix(vec3(length(v)), v, saturation);
        fragColor = vec4(v*.01, 1.);
    }
    else if (mod(iRegion, 4.0) == 1.0) {
        // REGION 1: ALTERNATIVE SPACE
        vec2 uv = 2. * fragCoord.xy / iResolution.xy - 1.;
        vec2 uvs = uv * iResolution.xy / max(iResolution.x, iResolution.y);
        
        float a1 = .5-iMouse.x/iResolution.x*0.5;
        float a2 = .8-iMouse.y/iResolution.y*0.5;
        mat2 rot1 = mat2(cos(a1),sin(a1),-sin(a1),cos(a1));
        mat2 rot2 = mat2(cos(a2),sin(a2),-sin(a2),cos(a2));
        
        float smoothTime = iTime * 0.2;
        
        vec3 p = vec3(uvs / 4. * iZoom, 0) + vec3(1., -1.3, 0.) + iPosition * 0.1;
        p.xz *= rot1;
        p.xy *= rot2;
        
        p += .2 * vec3(
            sin(smoothTime / 16.), 
            sin(smoothTime / 12.),  
            sin(smoothTime / 128.)
        );
        
        float freqs[4];
        freqs[0] = 0.5 + 0.4 * sin(smoothTime * 0.1);
        freqs[1] = 0.5 + 0.4 * sin(smoothTime * 0.15);
        freqs[2] = 0.5 + 0.4 * sin(smoothTime * 0.2);
        freqs[3] = 0.5 + 0.4 * sin(smoothTime * 0.25);
        
        float t = field(p, freqs[2]);
        float v = (1. - exp((abs(uv.x) - 1.) * 6.)) * (1. - exp((abs(uv.y) - 1.) * 6.));
        
        vec3 p2 = vec3(uvs / (4.+sin(smoothTime*0.11)*0.2+0.2+sin(smoothTime*0.15)*0.3+0.4) * iZoom, 1.5) 
                  + vec3(2., -1.3, -1.) 
                  + iPosition * 0.1;
        p2.xz *= rot1;
        p2.xy *= rot2;
        
        p2 += 0.25 * vec3(
            sin(smoothTime / 16.), 
            sin(smoothTime / 12.),  
            sin(smoothTime / 128.)
        );
        
        float t2 = field2(p2, freqs[3]);
        vec4 c2 = mix(.4, 1., v) * vec4(1.3 * t2 * t2 * t2, 1.8 * t2 * t2, t2* freqs[0], t2);
        
        vec2 seed = floor(p.xy * 2.0 * iResolution.x);
        vec3 rnd = nrand3(seed);
        vec4 starcolor = vec4(pow(rnd.y, 40.0));
        
        vec2 seed2 = floor(p2.xy * 2.0 * iResolution.x);
        vec3 rnd2 = nrand3(seed2);
        starcolor += vec4(pow(rnd2.y, 40.0));
        
        fragColor = mix(freqs[3]-.3, 1., v) * 
                    vec4(1.5*freqs[2] * t * t* t, 1.2*freqs[1] * t * t, freqs[3]*t, 1.0) + 
                    c2 + 
                    starcolor;
    }
    else if (mod(iRegion, 4.0) == 2.0) {
        // REGION 2: STORM REGION
        vec2 uv = 2. * fragCoord.xy / iResolution.xy - 1.;
        vec2 uvs = uv * iResolution.xy / max(iResolution.x, iResolution.y);
        
        float a1 = .5-iMouse.x/iResolution.x*0.5;
        float a2 = .8-iMouse.y/iResolution.y*0.5;
        mat2 rot1 = mat2(cos(a1),sin(a1),-sin(a1),cos(a1));
        mat2 rot2 = mat2(cos(a2),sin(a2),-sin(a2),cos(a2));
        
        float smoothTime = iTime * 0.2;
        
        vec3 p = vec3(uvs / 4. * iZoom, 0) + vec3(1., -1.3, 0.) + iPosition * 0.1;
        p.xz *= rot1;
        p.xy *= rot2;
        
        // Storm cloud positions
        vec2 stormPositions[3];
        stormPositions[0] = vec2(0.3, 0.4);
        stormPositions[1] = vec2(-0.5, -0.2);
        stormPositions[2] = vec2(0.1, -0.6);
        
        float stormIntensity = 0.0;
        for(int i = 0; i < 3; i++) {
            float dist = length(uvs - stormPositions[i]);
            float localStorm = stormCloud(uvs + stormPositions[i], smoothTime) * smoothstep(0.5, 0.0, dist);
            stormIntensity += localStorm * 0.3;
        }
        
        p += .2 * vec3(
            sin(smoothTime / 16.), 
            sin(smoothTime / 12.),  
            sin(smoothTime / 128.)
        );
        
        float freqs[4];
        freqs[0] = 0.5 + 0.4 * sin(smoothTime * 0.1);
        freqs[1] = 0.5 + 0.4 * sin(smoothTime * 0.15);
        freqs[2] = 0.5 + 0.4 * sin(smoothTime * 0.2);
        freqs[3] = 0.5 + 0.4 * sin(smoothTime * 0.25);
        
        float t = field(p, freqs[2]);
        float v = (1. - exp((abs(uv.x) - 1.) * 6.)) * (1. - exp((abs(uv.y) - 1.) * 6.));
        
        vec3 p2 = vec3(uvs / (4.+sin(smoothTime*0.11)*0.2+0.2+sin(smoothTime*0.15)*0.3+0.4) * iZoom, 1.5) 
                  + vec3(2., -1.3, -1.) 
                  + iPosition * 0.1;
        p2.xz *= rot1;
        p2.xy *= rot2;
        
        p2 += 0.25 * vec3(
            sin(smoothTime / 16.), 
            sin(smoothTime / 12.),  
            sin(smoothTime / 128.)
        );
        
        float t2 = field2(p2, freqs[3]);
        
        // Storm region colors
        vec3 stormColor = vec3(0.2, 0.3, 0.5); // Dark blue-gray base
        vec3 lightningColor = vec3(1.0, 0.9, 0.7); // Warm white for lightning
        
        vec4 c2 = mix(.4, 1., v) * vec4(1.3 * t2 * t2 * t2, 1.8 * t2 * t2, t2* freqs[0], t2);
        
        // Lightning effect
        float lightning = stormIntensity * pow(sin(smoothTime * 10.0) * 0.5 + 0.5, 8.0);
        vec3 finalStormColor = mix(stormColor, lightningColor, lightning);
        
        // Stars
        vec2 seed = floor(p.xy * 2.0 * iResolution.x);
        vec3 rnd = nrand3(seed);
        vec4 starcolor = vec4(pow(rnd.y, 40.0));
        
        vec2 seed2 = floor(p2.xy * 2.0 * iResolution.x);
        vec3 rnd2 = nrand3(seed2);
        starcolor += vec4(pow(rnd2.y, 40.0));
        
        // Final color with storm effects
        vec4 baseColor = mix(freqs[3]-.3, 1., v) * 
                        vec4(1.5*freqs[2] * t * t* t, 1.2*freqs[1] * t * t, freqs[3]*t, 1.0) + 
                        c2 + 
                        starcolor;
        
        fragColor = baseColor + vec4(finalStormColor * stormIntensity, 0.0);
        
        // Add hyperspeed tint if needed
        if (iSpeed > 0.5) {
            vec3 hyperspeedTint = vec3(0.2, 0.3, 0.8);
            fragColor.rgb = mix(fragColor.rgb, hyperspeedTint, iSpeed * 0.3);
        }
    }
    else if (mod(iRegion, 4.0) == 3.0) {
        // REGION 3: AUDIO REACTIVE SPACE
        vec2 uv = 2. * fragCoord.xy / iResolution.xy - 1.;
        vec2 uvs = uv * iResolution.xy / max(iResolution.x, iResolution.y);
        
        float audioIntensity = (iAudioFreqs.x + iAudioFreqs.y + iAudioFreqs.z + iAudioFreqs.w) * 0.25;
        
        vec3 p = vec3(uvs / 4., 0) + vec3(1., -1.3, 0.);
        p += .2 * vec3(
            sin(iTime / 16. + iAudioFreqs.x), 
            sin(iTime / 12. + iAudioFreqs.y),  
            sin(iTime / 128. + iAudioFreqs.z)
        );
        
        float freqs[4];
        freqs[0] = iAudioFreqs.x;
        freqs[1] = iAudioFreqs.y;
        freqs[2] = iAudioFreqs.z;
        freqs[3] = iAudioFreqs.w;
        
        float t = field(p, freqs[2]);
        float v = (1. - exp((abs(uv.x) - 1.) * 6.)) * (1. - exp((abs(uv.y) - 1.) * 6.));
        
        vec3 p2 = vec3(uvs / (4.+sin(iTime*0.11)*0.2+0.2+sin(iTime*0.15)*0.3+0.4), 1.5) + vec3(2., -1.3, -1.);
        p2 += 0.25 * vec3(
            sin(iTime / 16. + freqs[0]), 
            sin(iTime / 12. + freqs[1]),  
            sin(iTime / 128. + freqs[2])
        );
        
        float t2 = field2(p2, freqs[3]);
        vec4 c2 = mix(.4, 1., v) * vec4(1.3 * t2 * t2 * t2, 1.8 * t2 * t2, t2* freqs[0], t2);
        
        vec2 seed = p.xy * 2.0;
        seed = floor(seed * iResolution.x);
        vec3 rnd = nrand3(seed);
        vec4 starcolor = vec4(pow(rnd.y, 40.0));
        
        vec2 seed2 = p2.xy * 2.0;
        seed2 = floor(seed2 * iResolution.x);
        vec3 rnd2 = nrand3(seed2);
        starcolor += vec4(pow(rnd2.y, 40.0));
        
        fragColor = mix(freqs[3]-.3, 1., v) * 
                    vec4(1.5*freqs[2] * t * t* t, 1.2*freqs[1] * t * t, freqs[3]*t, 1.0) +
                    c2 +
                    starcolor;
                    
        // Audio reactive color enhancement
        fragColor.rgb *= 1.0 + audioIntensity * 0.5;
    }
}

void main() {
    mainImage(gl_FragColor, gl_FragCoord.xy);
}
      `
    });

    const mesh = new THREE.Mesh(geometry, material);
    scene.add(mesh);
    
    // Handle zoom functionality
    const handleClick = () => {
      const currentZoom = zoomRef.current;
      const targetZoom = currentZoom > 1.15 ? 0.8 : 1.5;
      const duration = 1500;
      const startZoom = currentZoom;
      const startTime = performance.now();
    
      const animateZoom = (currentTime: number) => {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        const eased = 1 - Math.pow(1 - progress, 4);
    
        zoomRef.current = startZoom + (targetZoom - startZoom) * eased;
        material.uniforms.iZoom.value = zoomRef.current;
    
        if (progress < 1) {
          requestAnimationFrame(animateZoom);
        }
      };
    
      requestAnimationFrame(animateZoom);
    };
    
    // Movement and speed constants
    const moveSpeed = 0.05;
    const rotateSpeed = 0.03;
    const maxSpeed = 0.8;
    const normalAcceleration = 0.001; // For smooth normal movement
    const maxNormalSpeed = 0.2; // Cap normal movement speed
    
    // Handle keyboard input
    const handleKeyDown = (event: KeyboardEvent) => {
      keysRef.current.add(event.key.toLowerCase());
    
      // Space to anchor (stop all movement)
      if (event.code === 'Space') {
        normalSpeedRef.current = 0;
        speedRef.current = 0;
      }
    };
    
    const handleKeyUp = (event: KeyboardEvent) => {
      keysRef.current.delete(event.key.toLowerCase());
    
      // Gradually slow down normal movement when keys released
      if (['a', 'd', 'x', '2'].includes(event.key.toLowerCase())) {
        normalSpeedRef.current = Math.max(0, normalSpeedRef.current - 0.1);
      }
    };
    
    const updateMovement = () => {
      const keys = keysRef.current;
      const pos = positionRef.current;
      const rotation = rotationRef.current;
    
      // Hyperspeed handling (W/S)
      const isHyperSpeed = keys.has('w') || keys.has('s');
      const targetSpeed = isHyperSpeed ? maxSpeed : 0;
      speedRef.current += (targetSpeed - speedRef.current) * 0.1;
    
      // Create rotation matrices
      const rotY = new THREE.Matrix4().makeRotationY(rotation.y);
      const rotX = new THREE.Matrix4().makeRotationX(rotation.x);
      const rotationMatrix = rotY.multiply(rotX);
    
      // Movement vectors
      const forward = new THREE.Vector3(0, 0, -1).applyMatrix4(rotationMatrix);
      const right = new THREE.Vector3(1, 0, 0).applyMatrix4(rotationMatrix);
      const up = new THREE.Vector3(0, 1, 0).applyMatrix4(rotationMatrix);
    
      // Normal movement acceleration
      if (keys.has('a') || keys.has('d') || keys.has('x') || keys.has('2')) {
        normalSpeedRef.current = Math.min(
          maxNormalSpeed,
          normalSpeedRef.current + normalAcceleration
        );
      } else {
        normalSpeedRef.current = Math.max(0, normalSpeedRef.current - normalAcceleration);
      }
    
      // Apply movements relative to current rotation
      const moveAmount = moveSpeed * (1 + speedRef.current);
      const normalMoveAmount = moveSpeed * normalSpeedRef.current;
    
      if (keys.has('s')) pos.add(forward.multiplyScalar(moveAmount));
      if (keys.has('w')) pos.add(forward.multiplyScalar(-moveAmount));
      if (keys.has('a')) pos.add(right.multiplyScalar(-normalMoveAmount));
      if (keys.has('d')) pos.add(right.multiplyScalar(normalMoveAmount));
      if (keys.has('x')) pos.add(up.multiplyScalar(-normalMoveAmount));
      if (keys.has('2')) pos.add(up.multiplyScalar(normalMoveAmount));
    
      // Handle rotation
      if (keys.has('q')) rotation.y = (rotation.y + rotateSpeed) % (Math.PI * 2);
      if (keys.has('e')) rotation.y = (rotation.y - rotateSpeed) % (Math.PI * 2);
      if (keys.has('z')) rotation.x = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, rotation.x - rotateSpeed));
      if (keys.has('c')) rotation.x = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, rotation.x + rotateSpeed));
    
      // Calculate region based on position and handle audio region
      const distance = pos.length();
      const newRegion = Math.min(3, Math.floor(distance / 10)); 
      
      // Update region only if changed
      if (newRegion !== regionRef.current) {
        regionRef.current = newRegion;
        setCurrentRegion(newRegion);
      }
    
      // Update shader uniforms with position and rotation
      material.uniforms.iPosition.value.copy(pos);
      material.uniforms.iSpeed.value = speedRef.current;
      material.uniforms.iRegion.value = regionRef.current;
      material.uniforms.iMouse.value.set(
        rotation.y * window.innerWidth / (Math.PI * 2),
        rotation.x * window.innerHeight / Math.PI,
        0,
        0
      );
    };
    
    const handleMouseMove = (event: MouseEvent) => {
      mouseRef.current = {
        x: event.clientX,
        y: event.clientY,
      };
    };
    
    const handleResize = () => {
      const width = window.innerWidth;
      const height = window.innerHeight;
      renderer.setSize(width, height);
      material.uniforms.iResolution.value.set(width, height, 1);
    };
    
    // Event listeners
    window.addEventListener('keydown', handleKeyDown);
    window.addEventListener('keyup', handleKeyUp);
    window.addEventListener('mousemove', handleMouseMove);
    window.addEventListener('click', handleClick);
    window.addEventListener('resize', handleResize);
    
    let animationFrameId: number;
    const animate = (time: number) => {
      updateMovement();
      material.uniforms.iTime.value = time * 0.001;
      renderer.render(scene, camera);
      animationFrameId = requestAnimationFrame(animate);
    };
    
    animate(0);
    
    return () => {
      window.removeEventListener('keydown', handleKeyDown);
      window.removeEventListener('keyup', handleKeyUp);
      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('click', handleClick);
      window.removeEventListener('resize', handleResize);
      cancelAnimationFrame(animationFrameId);
      renderer.dispose();
    };
    
  }, []);
  

  return (
    <>
      <canvas
        ref={canvasRef}
        style={{
          position: 'fixed',
          top: 0,
          left: 0,
          width: '100%',
          height: '100%',
        }}
      />
      <div 
        style={{
          position: 'fixed',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          color: 'white',
          fontSize: 'min(8vw, 80px)',
          fontFamily: 'Arial, sans-serif',
          textAlign: 'center',
          textShadow: '0 0 20px rgba(0,0,0,0.5)',
          userSelect: 'none',
          opacity: textVisible ? 0.8 : 0,
          transition: 'opacity 0.5s ease-in-out',
          pointerEvents: 'none'
        }}
      >
        {regionText}
      </div>
      
      <div 
        style={{
          position: 'fixed',
          bottom: '20px',
          left: '20px',
          color: 'white',
          fontSize: '1rem',
          fontFamily: 'Arial, sans-serif',
          textShadow: '0 0 5px rgba(0,0,0,0.5)',
          userSelect: 'none',
          backgroundColor: 'rgba(0, 0, 0, 0.5)',
          padding: '10px',
          borderRadius: '5px',
          maxWidth: '90%',
          zIndex: 1000
        }}
      >
        W/S: Hyperspeed | A/D: Move Left/Right | X/2: Forward/Back | 
        Q/E: Rotate Left/Right | Z/C: Rotate Up/Down | Space: Stop | Click: Zoom
      </div>
    </>
  );
};

export default StarNestShader;