import React, { useState, useEffect, useRef, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,
  TooltipProps
} from 'recharts';
import { TimeData } from '../../types/index';
import { COLORS } from '../../constants/index';

interface ActivityChartProps {
  data?: TimeData[];
  timeRange?: '24h' | '7d' | '30d' | '90d' | '6m' | '1y' | 'lifetime';
}


interface ChartDataPoint {
  time: string;
  logins: number;
  users: number;
  avgLoginsPerUser?: string;
}

interface CustomTooltipProps {
  label: string;
  value: string | number;
  color: string;
  isHovered?: boolean;
}

interface TooltipContainerProps extends Omit<TooltipProps<number, string>, 'content'> {
  hoveredLine: string | null;
}



const TimeHeader = ({ time }: { time: string }) => (
  <motion.div
    initial={{ opacity: 0, y: -10 }}
    animate={{ opacity: 1, y: 0 }}
    className="mb-4 text-center text-4xl font-bold bg-gradient-to-r from-zinc-100 to-zinc-300 bg-clip-text text-transparent"
  >
    {time}
  </motion.div>
);


const CustomTooltip = ({ label, value, color, isHovered }: CustomTooltipProps) => (
  <motion.div
    initial={{ opacity: 0, scale: 0.95 }}
    animate={{ opacity: 1, scale: 1 }}
    exit={{ opacity: 0, scale: 0.95 }}
    className="flex items-center justify-between w-full px-4 py-3 rounded-lg transition-all duration-300"
    style={{
      background: `linear-gradient(135deg, ${color}${isHovered ? '75' : '45'}, ${color}${isHovered ? '65' : '35'})`,
      border: `1px solid ${color}${isHovered ? '95' : '60'}`,
      boxShadow: isHovered 
        ? `0 0 40px ${color}60, 0 0 20px ${color}40, inset 0 0 20px ${color}30` 
        : `0 0 20px ${color}25`,
      transform: `scale(${isHovered ? 1.03 : 1})`,
      filter: isHovered ? 'brightness(1.3) contrast(1.1)' : 'none'
    }}
  >
    <span className="text-sm font-medium text-zinc-100">
      {label}
    </span>
    <span className="text-xl font-bold text-white">
      {typeof value === 'number' ? value.toLocaleString() : value}
    </span>
  </motion.div>
);

const TooltipContainer: React.FC<TooltipContainerProps> = ({ active, payload, label, hoveredLine }) => {
  if (active && payload?.length) {
    return (
      <motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.95 }}
        className="px-2 py-3 rounded-xl bg-zinc-900/95 backdrop-blur-md border border-zinc-800 shadow-xl"
      >
        <TimeHeader time={label ?? ''} />
        <div className="space-y-2 min-w-[200px]">
          {/* "Users" (Blue) div is displayed above "Logins" (Green) div */}
          <CustomTooltip
            label="Logins"
            value={payload.find(item => item.dataKey === "users")?.value ?? 0}
            color={COLORS.blue}
            isHovered={hoveredLine === 'users'}
          />
          <CustomTooltip
            label="Users"
            value={payload.find(item => item.dataKey === "logins")?.value ?? 0}
            color={COLORS.green}
            isHovered={hoveredLine === 'logins'}
          />
        </div>
      </motion.div>
    );
  }
  return null;
};


const generateTimeBasedData = (timeRange: string): ChartDataPoint[] => {
  const data: ChartDataPoint[] = [];
  let totalIntervals: number;

  switch (timeRange) {
    case '24h':
      totalIntervals = 24; // 24 hours
      break;
    case '7d':
      totalIntervals = 7; // 7 days
      break;
    case '30d':
      totalIntervals = 30; // 30 days
      break;
    case '90d':
      totalIntervals = 90; // 90 days
      break;
    case '6m':
      totalIntervals = 180; // 6 months (approx)
      break;
    case '1y':
      totalIntervals = 365; // 1 year
      break;
    case 'lifetime':
      totalIntervals = 365 * 10; // Dummy data for lifetime
      break;
    default:
      totalIntervals = 24; // Default to 24 hours
  }

  for (let i = 0; i < totalIntervals; i++) {
    data.push(generateDataPoint(i, timeRange));
  }

  return data;
};

interface TimeRangeConfig {
  minUsers: number;
  maxUsers: number;
  avgLoginsPerUser: number;
  loginsVariance: number;
}

const timeRangeConfigs: Record<string, TimeRangeConfig> = {
  '24h': {
    minUsers: 2000,
    maxUsers: 5000,
    avgLoginsPerUser: 3.5,  // Each user logs in 2-5 times on average
    loginsVariance: 0.3
  },
  '7d': {
    minUsers: 500,
    maxUsers: 1500,
    avgLoginsPerUser: 5.0,  // More logins over a week
    loginsVariance: 0.3
  },
  '30d': {
    minUsers: 400,
    maxUsers: 800,
    avgLoginsPerUser: 12.0, // Even more logins over a month
    loginsVariance: 0.25
  },
  '90d': {
    minUsers: 300,
    maxUsers: 600,
    avgLoginsPerUser: 25.0,
    loginsVariance: 0.25
  },
  '6m': {
    minUsers: 200,
    maxUsers: 400,
    avgLoginsPerUser: 40.0,
    loginsVariance: 0.2
  },
  '1y': {
    minUsers: 100,
    maxUsers: 300,
    avgLoginsPerUser: 60.0,
    loginsVariance: 0.2
  },
  'lifetime': {
    minUsers: 30,
    maxUsers: 100,
    avgLoginsPerUser: 100.0,
    loginsVariance: 0.2
  }
};

// And update the data point generation to enforce this relationship:
const generateDataPoint = (index: number, timeRange: string): ChartDataPoint => {
  const config = timeRangeConfigs[timeRange] || timeRangeConfigs['24h'];
  

  const users = Math.floor(
    Math.random() * (config.maxUsers - config.minUsers) + config.minUsers
  );
  
  const baseLogins = users * config.avgLoginsPerUser;
  const variance = baseLogins * config.loginsVariance * (Math.random() * 2 - 1);
  const logins = Math.max(users + 1, Math.floor(baseLogins + variance));

  return {
    time: formatTimeLabel(index, timeRange),
    users,
    logins,
    avgLoginsPerUser: (logins / users).toFixed(2)
  };
};



const formatTimeLabel = (index: number, timeRange: string): string => {
  const getWeekdayLabel = (idx: number) => {
    const date = new Date();
    date.setDate(date.getDate() - (6 - idx));
    return date.toLocaleDateString('en-US', { weekday: 'short' });
  };

  const getMonthLabel = (idx: number, months: number) => {
    const date = new Date();
    date.setMonth(date.getMonth() - (months - idx));
    return date.toLocaleDateString('en-US', { month: 'short' });
  };

  switch (timeRange) {
    case '24h':
      return `${index.toString().padStart(2, '0')}:00`;
    case '7d':
      return getWeekdayLabel(index);
    case '30d':
    case '90d':
      return `Day ${index + 1}`;
    case '6m':
      return getMonthLabel(index, 5);
    case '1y':
      return getMonthLabel(index, 11);
    default:
      return `Period ${index + 1}`;
  }
};

const MetricDisplay: React.FC<{
  label: string;
  value: number | string;
  color: string;
  trend?: number;
}> = ({ label, value, color, trend }) => (
  <motion.div
    initial={{ opacity: 0, y: -20 }}
    animate={{ opacity: 1, y: 0 }}
    exit={{ opacity: 0, y: 20 }}
    transition={{ duration: 0.3, ease: "easeOut" }}
    className="flex flex-col items-center"
  >
    <div className="relative px-6 py-3 rounded-xl bg-black/50 backdrop-blur-sm border border-white/10 shadow-lg">
      <div className="flex flex-col items-center gap-0.5">
        <span className="text-zinc-300 text-sm font-medium">{label}</span>
        <span className="text-2xl font-bold" style={{ color }}>
          {typeof value === 'number' ? value.toLocaleString() : value}
        </span>
        {trend !== undefined && (
          <div 
            className={`
              flex items-center gap-1 mt-1 px-2 py-0.5 rounded-full 
              ${trend >= 0 ? 'bg-green-500/20' : 'bg-red-500/20'}
              ${trend >= 0 ? 'text-green-400' : 'text-red-400'}
              text-xs font-medium
            `}
          >
            <span className="text-sm">
              {trend >= 0 ? '↑' : '↓'}
            </span>
            {Math.abs(trend).toFixed(1)}%
          </div>
        )}
      </div>
    </div>
  </motion.div>
);

const LiveIndicator: React.FC<{ isLive: boolean }> = ({ isLive }) => (
  <div className="absolute top-4 right-4 flex items-center space-x-2">
    <motion.div
      animate={{ 
        opacity: isLive ? [1, 0.5, 1] : 1,
        scale: isLive ? [1, 0.95, 1] : 1
      }}
      transition={{ 
        duration: 2,
        repeat: isLive ? Infinity : 0,
        ease: "easeInOut"
      }}
      className="flex items-center space-x-1.5 px-2 py-1 rounded-full bg-black/60 backdrop-blur-sm border border-white/10"
    >
      <span className="w-2 h-2 rounded-full bg-green-500" />
      {isLive && <span className="text-xs text-zinc-400">Live</span>}
    </motion.div>
  </div>
);

const ActivityChart: React.FC<ActivityChartProps> = ({ 
  data, 
  timeRange = '24h' 
}) => {
  const [activeMetric, setActiveMetric] = useState<'users' | 'logins'>('users');
  const [isHovering, setIsHovering] = useState(false);
  const [hoveredLine, setHoveredLine] = useState<string | null>(null);
  const containerRef = useRef<HTMLDivElement>(null);
  const [isNarrow, setIsNarrow] = useState(false);

  // Generate default data based on the timeRange
  const defaultData = useMemo(() => generateTimeBasedData(timeRange), [timeRange]);

  // Use the provided data if available; otherwise, use the default data
  const chartData = data && data.length > 0 ? data : defaultData;

  useEffect(() => {
    const checkWidth = () => {
      if (containerRef.current) {
        setIsNarrow(containerRef.current.offsetWidth < 400);
      }
    };

    checkWidth();
    const resizeObserver = new ResizeObserver(checkWidth);
    if (containerRef.current) {
      resizeObserver.observe(containerRef.current);
    }

    return () => resizeObserver.disconnect();
  }, []);

  useEffect(() => {
    if (isNarrow) {
      const interval = setInterval(() => {
        setActiveMetric(prev => prev === 'users' ? 'logins' : 'users');
      }, 8000);
      return () => clearInterval(interval);
    }
  }, [isNarrow]);

  // Use chartData instead of data here
  const filteredData = useMemo(() => {
    let points;

    switch (timeRange) {
      case '7d':
        points = 7; // Days in 7 days
        break;
      case '30d':
        points = 30; // Days in 30 days
        break;
      case '90d':
        points = 90; // Days in 90 days
        break;
      case '6m':
        points = 180; // Approx 6 months
        break;
      case '1y':
        points = 365; // 1 year
        break;
      case 'lifetime':
        points = chartData.length;
        break;
      default:
        points = 24; // Default to 24 for '24h'
    }

    // Slice the latest `points` of data to display.
    const result = chartData.slice(-points);
    return result;
  }, [chartData, timeRange]);

  const statistics = useMemo(() => {
    const latest = filteredData[filteredData.length - 1] || { users: 0, logins: 0 };
    const previous = filteredData[filteredData.length - 2] || { users: 0, logins: 0 };
    
    return {
      users: {
        current: latest.users,
        trend: ((latest.users - previous.users) / (previous.users || 1)) * 100
      },
      logins: {
        current: latest.logins,
        trend: ((latest.logins - previous.logins) / (previous.logins || 1)) * 100
      }
    };
  }, [filteredData]);
  
  const gradientDefinitions = (
    <defs>
      <linearGradient id="colorUsers" x1="0" y1="0" x2="0" y2="1">
        <stop offset="5%" stopColor={COLORS.blue} stopOpacity={0.4} />
        <stop offset="95%" stopColor={COLORS.blue} stopOpacity={0.1} />
      </linearGradient>
      <linearGradient id="colorLogins" x1="0" y1="0" x2="0" y2="1">
        <stop offset="5%" stopColor={COLORS.green} stopOpacity={0.4} />
        <stop offset="95%" stopColor={COLORS.green} stopOpacity={0.1} />
      </linearGradient>
  
      {/* Glow effect for intense sparkles */}
      <filter id="sharpGlow">
        <feGaussianBlur stdDeviation="5" result="coloredBlur" />
        <feMerge>
          <feMergeNode in="coloredBlur" />
          <feMergeNode in="SourceGraphic" />
        </feMerge>
      </filter>
  
      {/* Background sparkle pattern with mixed glows */}
      <pattern id="backgroundSparklePattern" patternUnits="userSpaceOnUse" width="200" height="200">
        <circle cx="30" cy="40" r="1.5" fill="rgba(255, 255, 255, 0.9)" filter="url(#sharpGlow)">
          <animate attributeName="r" values="1.5; 2.5; 1.5" dur="3s" repeatCount="indefinite" />
          <animate attributeName="opacity" values="0.9; 0.5; 0.9" dur="3s" repeatCount="indefinite" />
        </circle>
        <circle cx="100" cy="60" r="1.8" fill="rgba(255, 255, 255, 0.5)">
          {/* Softer sparkle without filter */}
          <animate attributeName="r" values="1.8; 2.8; 1.8" dur="4s" repeatCount="indefinite" begin="1s" />
          <animate attributeName="opacity" values="0.5; 0.2; 0.5" dur="4s" repeatCount="indefinite" begin="1s" />
        </circle>
        <circle cx="150" cy="100" r="1.2" fill="rgba(255, 255, 255, 1)" filter="url(#sharpGlow)">
          <animate attributeName="r" values="1.2; 2; 1.2" dur="5s" repeatCount="indefinite" begin="2s" />
          <animate attributeName="opacity" values="1; 0.3; 1" dur="5s" repeatCount="indefinite" begin="2s" />
        </circle>
      </pattern>
  
      {/* Foreground sparkle pattern with intense glows and standard sparkles */}
      <pattern id="foregroundSparklePattern" patternUnits="userSpaceOnUse" width="200" height="200">
        <circle cx="60" cy="90" r="1.8" fill="rgba(255, 255, 255, 1)" filter="url(#sharpGlow)">
          <animate attributeName="r" values="1.8; 2.8; 1.8" dur="3.5s" repeatCount="indefinite" />
          <animate attributeName="opacity" values="1; 0.6; 1" dur="3.5s" repeatCount="indefinite" />
        </circle>
        <circle cx="120" cy="30" r="1.5" fill="rgba(255, 255, 255, 0.8)">
          {/* Standard sparkle without glow effect */}
          <animate attributeName="r" values="1.5; 2; 1.5" dur="4.5s" repeatCount="indefinite" begin="1s" />
          <animate attributeName="opacity" values="0.8; 0.4; 0.8" dur="4.5s" repeatCount="indefinite" begin="1s" />
        </circle>
        <circle cx="30" cy="150" r="2.2" fill="rgba(255, 255, 255, 1)" filter="url(#sharpGlow)">
          <animate attributeName="r" values="2.2; 3.2; 2.2" dur="3s" repeatCount="indefinite" />
          <animate attributeName="opacity" values="1; 0.4; 1" dur="3s" repeatCount="indefinite" />
        </circle>
      </pattern>
  
      {/* Neon sparkle effect for a few standout sparkles */}
      <pattern id="neonSparklePattern" patternUnits="userSpaceOnUse" width="200" height="200">
        <circle cx="80" cy="80" r="2.5" fill="rgba(0, 255, 255, 1)" filter="url(#sharpGlow)">
          <animate attributeName="r" values="2.5; 4.5; 2.5" dur="2.5s" repeatCount="indefinite" />
          <animate attributeName="opacity" values="1; 0.2; 1" dur="2.5s" repeatCount="indefinite" />
          <animate attributeName="fill" values="rgba(0, 255, 255, 1); rgba(255, 0, 255, 1); rgba(0, 255, 255, 1)" dur="2.5s" repeatCount="indefinite" />
        </circle>
      </pattern>
  
      {/* Sparkle masks */}
      <mask id="usersBackgroundSparkleMask">
        <rect width="100%" height="100%" fill="url(#backgroundSparklePattern)" />
      </mask>
      <mask id="usersForegroundSparkleMask">
        <rect width="100%" height="100%" fill="url(#foregroundSparklePattern)" />
      </mask>
      <mask id="usersNeonSparkleMask">
        <rect width="100%" height="100%" fill="url(#neonSparklePattern)" />
      </mask>
      <mask id="loginsBackgroundSparkleMask">
        <rect width="100%" height="100%" fill="url(#backgroundSparklePattern)" />
      </mask>
      <mask id="loginsForegroundSparkleMask">
        <rect width="100%" height="100%" fill="url(#foregroundSparklePattern)" />
      </mask>
      <mask id="loginsNeonSparkleMask">
        <rect width="100%" height="100%" fill="url(#neonSparklePattern)" />
      </mask>
    </defs>
  );
  
  const ensureCompleteData = (data: ChartDataPoint[], timeRange: string): ChartDataPoint[] => {
    let intervals: number;
    let intervalLabel: string;
  
    switch (timeRange) {
      case '7d':
        intervals = 7;
        intervalLabel = 'day';
        break;
      case '30d':
        intervals = 30;
        intervalLabel = 'day';
        break;
      case '90d':
        intervals = 90;
        intervalLabel = 'day';
        break;
      case '24h':
      default: // Consolidated '24h' and default
        intervals = 24;
        intervalLabel = 'hour';
        break;
    }
  
    const fullData: ChartDataPoint[] = [];
    
    for (let i = 0; i < intervals; i++) {
      const timeLabel = intervalLabel === 'hour'
        ? `${i.toString().padStart(2, '0')}:00`
        : `Day ${i + 1}`;
        
      const existingDataPoint = data.find((d) => d.time === timeLabel);
  
      if (existingDataPoint) {
        fullData.push(existingDataPoint);
      } else {
        const previousData = fullData[fullData.length - 1] || { logins: 0, users: 0 };
        const nextDataIndex = data.findIndex((d) => d.time === (intervalLabel === 'hour' ? `${(i + 1).toString().padStart(2, '0')}:00` : `Day ${i + 2}`));
        const nextData = nextDataIndex !== -1 ? data[nextDataIndex] : previousData;
  
        const interpolatedData = {
          time: timeLabel,
          logins: Math.floor((previousData.logins + nextData.logins) / 2),
          users: Math.floor((previousData.users + nextData.users) / 2),
        };
  
        fullData.push(interpolatedData);
      }
    }
    
    return fullData;
  };
    
  const completeData = ensureCompleteData(filteredData, timeRange);


  const renderTooltip = (props: TooltipProps<number, string>) => (
    <TooltipContainer {...props} hoveredLine={hoveredLine} />
  );
  

  return (
    <div 
      ref={containerRef}
      className="relative h-80 bg-gradient-to-br from-zinc-800/95 via-zinc-900 to-black rounded-xl shadow-2xl p-4 flex flex-col justify-between overflow-hidden transition-all duration-300"
    >
      <AnimatePresence mode="wait">
        {!isHovering && (
          <motion.div
            className="absolute top-4 left-0 right-0 flex justify-center space-x-8 z-50"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.3 }}
          >
            {isNarrow ? (
              <MetricDisplay
                label={activeMetric === 'users' ? 'Users' : 'Logins'}
                value={statistics[activeMetric].current}
                color={activeMetric === 'users' ? COLORS.blue : COLORS.green}
                trend={statistics[activeMetric].trend}
              />
            ) : (
              <>
                <MetricDisplay
                  label="Logins"
                  value={statistics.users.current}
                  color={COLORS.blue}
                  trend={statistics.users.trend}
                />
                <MetricDisplay
                  label="Users"
                  value={statistics.logins.current}
                  color={COLORS.green}
                  trend={statistics.logins.trend}
                />
              </>
            )}
          </motion.div>
        )}
      </AnimatePresence>

      <button
      className="flex-grow relative group overflow-hidden"
      onMouseEnter={() => setIsHovering(true)}
      onMouseLeave={() => setIsHovering(false)}
    >
        <div className="sr-only">
          Interactive activity chart showing user and login metrics over time
        </div>
        
        <ResponsiveContainer width="100%" height="100%">
  <AreaChart 
    data={completeData}
    margin={{ top: 10, right: 0, left: 0, bottom: 0 }}
  >
            {gradientDefinitions}
            
            <CartesianGrid 
              strokeDasharray="3 3" 
              stroke="#444"
              opacity={0.5}
              vertical={false}
            />
            
            <XAxis 
  dataKey="time"
  stroke="#A0AEC0"
  tick={{ fill: '#E2E8F0' }}
  tickLine={{ stroke: '#666' }}
  axisLine={{ stroke: '#666' }}
  interval={timeRange === '24h' ? 'preserveStartEnd' : undefined}
  allowDataOverflow
  dy={8}
  tickFormatter={(time) => {
    // Custom formatting based on timeRange for readability
    if (timeRange === '24h') return time;
    if (timeRange === '7d' || timeRange === '30d') return time.slice(0, 5); // Show day/month
    if (timeRange === '90d' || timeRange === '6m' || timeRange === '1y') return time.split(':')[0]; // Show hours only
    return time;
  }}
/>

                        
            <YAxis
              stroke="#A0AEC0"
              domain={['auto', 'auto']}
              tickCount={5}
              tick={{ fill: '#E2E8F0' }}
              tickLine={{ stroke: '#666' }}
              axisLine={{ stroke: '#666' }}
              dx={-8}
              width={50} // Increased width to accommodate labels
            />

            <Tooltip<number, string>
                content={renderTooltip}
                cursor={{
                stroke: hoveredLine === 'users' ? COLORS.blue : COLORS.green,
                strokeWidth: 1,
                strokeDasharray: '4 4',
                opacity: 0.5
              }}
            />
{/* Background Sparkle Layer for Users */}
<Area
  type="monotone"
  dataKey="users"
  stroke="none"
  fillOpacity={1}
  fill="url(#colorUsers)"
  mask="url(#usersBackgroundSparkleMask)"
  isAnimationActive={false}
  pointerEvents="none"
  style={{
    filter: 'drop-shadow(0 0 8px rgba(255, 255, 255, 0.6))',
    opacity: 0, // Start hidden for fade-in effect
    animation: 'fadeIn 2s ease forwards',
    zIndex: 1,
  }}
/>

{/* Main Area for Users with Gradient */}
<Area
  type="monotone"
  dataKey="users"
  stroke={COLORS.blue}
  strokeWidth={hoveredLine === 'users' ? 4 : 2}
  fillOpacity={1}
  fill="url(#colorUsers)"
  isAnimationActive={true}
  animationDuration={1000}
  animationEasing="ease-out"
  onMouseEnter={() => setHoveredLine('users')}
  onMouseLeave={() => setHoveredLine(null)}
  style={{
    filter: hoveredLine === 'users' ? 'url(#sharpGlow) drop-shadow(0 0 10px rgba(59, 130, 246, 0.8))' : 'none',
    transition: 'all 0.3s ease',
    zIndex: 2,
  }}
/>

{/* Foreground Sparkle Layer for Users */}
<Area
  type="monotone"
  dataKey="users"
  stroke="none"
  fillOpacity={1}
  fill="url(#colorUsers)"
  mask="url(#usersForegroundSparkleMask)"
  isAnimationActive={false}
  pointerEvents="none"
  style={{
    filter: 'drop-shadow(0 0 10px rgba(255, 255, 255, 1))',
    opacity: 0,
    animation: 'fadeIn 2s ease forwards',
    animationDelay: '1s',
    zIndex: 3,
  }}
/>

{/* Neon Sparkle for Users */}
<Area
  type="monotone"
  dataKey="users"
  stroke="none"
  fillOpacity={1}
  fill="url(#colorUsers)"
  mask="url(#usersNeonSparkleMask)"
  isAnimationActive={false}
  pointerEvents="none"
  style={{
    filter: 'drop-shadow(0 0 15px rgba(0, 255, 255, 1))',
    opacity: 0,
    animation: 'fadeIn 2s ease forwards',
    animationDelay: '1.5s',
    zIndex: 4,
  }}
/>

{/* Background Sparkle Layer for Logins */}
<Area
  type="monotone"
  dataKey="logins"
  stroke="none"
  fillOpacity={1}
  fill="url(#colorLogins)"
  mask="url(#loginsBackgroundSparkleMask)"
  isAnimationActive={false}
  pointerEvents="none"
  style={{
    filter: 'drop-shadow(0 0 8px rgba(255, 255, 255, 0.6))',
    opacity: 0,
    animation: 'fadeIn 2s ease forwards',
    zIndex: 1,
  }}
/>

{/* Main Area for Logins with Gradient */}
<Area
  type="monotone"
  dataKey="logins"
  stroke={COLORS.green}
  strokeWidth={hoveredLine === 'logins' ? 4 : 2}
  fillOpacity={1}
  fill="url(#colorLogins)"
  isAnimationActive={true}
  animationDuration={1000}
  animationEasing="ease-out"
  onMouseEnter={() => setHoveredLine('logins')}
  onMouseLeave={() => setHoveredLine(null)}
  style={{
    filter: hoveredLine === 'logins' ? 'url(#sharpGlow) drop-shadow(0 0 10px rgba(34, 197, 94, 0.8))' : 'none',
    transition: 'all 0.3s ease',
    zIndex: 2,
  }}
/>

{/* Foreground Sparkle Layer for Logins */}
<Area
  type="monotone"
  dataKey="logins"
  stroke="none"
  fillOpacity={1}
  fill="url(#colorLogins)"
  mask="url(#loginsForegroundSparkleMask)"
  isAnimationActive={false}
  pointerEvents="none"
  style={{
    filter: 'drop-shadow(0 0 10px rgba(255, 255, 255, 1))',
    opacity: 0,
    animation: 'fadeIn 2s ease forwards',
    animationDelay: '1s',
    zIndex: 3,
  }}
/>

{/* Neon Sparkle for Logins */}
<Area
  type="monotone"
  dataKey="logins"
  stroke="none"
  fillOpacity={1}
  fill="url(#colorLogins)"
  mask="url(#loginsNeonSparkleMask)"
  isAnimationActive={false}
  pointerEvents="none"
  style={{
    filter: 'drop-shadow(0 0 15px rgba(0, 255, 255, 1))',
    opacity: 0,
    animation: 'fadeIn 2s ease forwards',
    animationDelay: '1.5s',
    zIndex: 4,
  }}
/>

          </AreaChart>
        </ResponsiveContainer>
      </button>

      <LiveIndicator isLive={true} />
    </div>
  );
};

export default ActivityChart;
